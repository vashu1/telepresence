/*
git clone https://github.com/aws-amplify/amplify-js.git
Download the amazon-cognito-identity-js package from npm and get amazon-cognito-identity.min.js file from the dist folder. Place it in your project.

 Amazon Cognito Identity Provider examples https://docs.amazonaws.cn/en_us/sdk-for-javascript/v3/developer-guide/javascript_cognito-identity-provider_code_examples.html

 cognito http https://andrewtarry.com/posts/aws-http-gateway-with-cognito-and-terraform/
iot cognito https://stackoverflow.com/questions/40301345/connect-to-aws-iot-using-web-socket-with-cognito-authenticated-users
certeficate iot terraform https://advancedweb.hu/how-to-manage-iot-core-resources-with-terraform/
*/

resource "aws_cognito_user_pool" "pool" {
  name = "${var.env_name}-pool"

  password_policy {
    minimum_length = 10
    require_lowercase = false
    require_numbers = false
    require_symbols = false
    require_uppercase = false
    temporary_password_validity_days = 7
  }
}


// Create a user pool client with no SRP authentication
// JavaScript SDK doesn't support apps that have a client secret.  https://stackoverflow.com/questions/43659441/aws-cognito-unable-to-verify-secret-hash-for-client
// https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp/client/admin_initiate_auth.html
resource "aws_cognito_user_pool_client" "client" {
  name = "${var.env_name}-client"

  user_pool_id = aws_cognito_user_pool.pool.id

  generate_secret     = false
  explicit_auth_flows = ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_USER_PASSWORD_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]

  token_validity_units {
        access_token  = "hours"
        id_token      = "hours"
  }
  id_token_validity = 10
  access_token_validity = 10
}

resource "aws_cognito_identity_pool" "pool" {
  identity_pool_name               = "${var.env_name}-identity-pool"
  allow_unauthenticated_identities = false //TODO false

  cognito_identity_providers {
    client_id               = "user_pool"
    provider_name           = aws_cognito_user_pool.pool.endpoint
    server_side_token_check = false
  }
}

resource "aws_cognito_user" "user" {
  user_pool_id = aws_cognito_user_pool.pool.id
  username = var.username
  password = var.password
  # import string ; import random ; ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(12)])
}

// "arn:aws:iot:us-east-1:123456789012:client/${cognito-identity.amazonaws.com:sub}"

// https://waverleysoftware.com/blog/aws-iot-cognito/
resource "aws_iam_role" "group_role" {
  name = "${var.env_name}-user-group-role"

  assume_role_policy = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Federated": "cognito-identity.amazonaws.com"
        },
        "Action": "sts:AssumeRoleWithWebIdentity",
        "Condition": {
          "StringEquals": {
            "cognito-identity.amazonaws.com:aud": "${var.aws_region}:${aws_cognito_identity_pool.pool.id}"
          },
          "ForAnyValue:StringLike": {
            "cognito-identity.amazonaws.com:amr": "authenticated"
          }
        }
      }
    ]
  }
EOF
}

/*

    {
      "Version": "2012-10-17",
      "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:Connect"
        ],
        "Resource": [
          "arn:aws:iot:${var.aws_region}:${data.aws_caller_identity.current.account_id}:client/${aws_iot_thing.robot.default_client_id}"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:Subscribe"
        ],
        "Resource": [
          "arn:aws:iot:${var.aws_region}:${data.aws_caller_identity.current.account_id}:topicfilter/${var.env_name}-robot-in",
          "arn:aws:iot:${var.aws_region}:${data.aws_caller_identity.current.account_id}:topicfilter/${var.env_name}-robot-out"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:Publish"
        ],
        "Resource": [
          "arn:aws:iot:${var.aws_region}:${data.aws_caller_identity.current.account_id}:topic/${var.env_name}-robot-in"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:Receive"
        ],
        "Resource": [
          "arn:aws:iot:${var.aws_region}:${data.aws_caller_identity.current.account_id}:topic/${var.env_name}-robot-out"
        ]
      }
      ]
    }
EOF
}
*/
// $aws/things/YReY8z9f*/shadow/*"
//           //"arn:aws:iot:${var.aws_profile}:${data.aws_caller_identity.current.account_id}:topic/$aws/things/YReY8z9f*/shadow/*"

/*
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Federated": "cognito-identity.amazonaws.com"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
            "StringEquals": {
              "cognito-identity.amazonaws.com:aud": "us-west-2:12345678-dead-beef-cafe-123456790ab"
            },
            "ForAnyValue:StringLike": {
              "cognito-identity.amazonaws.com:amr": "authenticated"
            }
      }
    }
  ]
}
EOF
}
*/

resource "aws_cognito_user_group" "group" {
  user_pool_id = aws_cognito_user_pool.pool.id
  name         = "${var.env_name}-group"
  role_arn     = aws_iam_role.group_role.arn
}

resource "aws_cognito_user_in_group" "user_to_group" {
  user_pool_id = aws_cognito_user_pool.pool.id
  group_name   = aws_cognito_user_group.group.name
  username     = aws_cognito_user.user.username
}